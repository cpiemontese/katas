env_files = [
    { path = "./config/.env" }
]

[env]
DATABASE_URL = "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"

[tasks.run]
description = "Run test."
command = "cargo"
args = ["run"]

[tasks.watch]
description = "Watch test."
command = "cargo"
args = ["run"]
watch = true

[tasks.watch-test]
description = "Run tests on file change."
command = "cargo"
args = ["test"]
watch = true

[tasks.db-setup]
description = "Setup DB"
command = "sqlx"
args = ["database", "setup"]

[tasks.db-prepare]
description = "Sync sqlx-data file"
command = "cargo"
args = ["sqlx", "prepare", "--", "--lib"]
dependencies = ["db-setup"]
env = { "SQLX_OFFLINE" = "false" }

[tasks.db-reset]
description = "Reset DB"
command = "sqlx"
args = ["database", "reset", "-y"]

[tasks.db-check]
description = "Check if sqlx-data is out of date"
command = "cargo"
args = ["sqlx", "prepare", "--check", "--", "--lib"]
env = { "SQLX_OFFLINE" = "false" }

[tasks.lint]
description = "Run lint"
command = "cargo"
dependencies = ["dotenv-linter"]
args = ["clippy", "--all-targets", "--all-features"]

[tasks.format]
description = "Run the cargo rustfmt plugin."
command = "cargo"
args = ["fmt"]

[tasks.format-ci]
description = "Runs the cargo rustfmt plugin during CI."
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.clippy-ci]
command = "cargo"
args = ["clippy", "--", "-D", "warnings", "-A", "clippy::too-many-arguments"]

[tasks.test]
description = "Run tests."
command = "cargo"
args = ["test", "${@}"]

[tasks.build-ci]
description = "Build project inside CI."
command = "cargo"
args = ["build", "-j", "2"]

[tasks.cargo-prune]
description = "Run cargo prune"
command = "cargo"
args = ["prune"]

[tasks.delete-artifacts]
description = "Remove non cachable artifacts"
script = [
    '''
    #!/bin/bash
    set -e
    set -x
    find ./target/debug -type f -maxdepth 1 -delete || true
    rm -rfv ./target/{debug,release}/deps/*test*
    rm -rfv ./target/{debug,release}/.fingerprint/*test*
    rm -rf ./target/{debug,release}/incremental/
    rm -rf ./target/tests/target/debug/incremental/
    '''
]

[tasks.print-stats]
description = "Print cache size"
command = "du"
args = ["-sh", "target", ".cargo"]

[tasks.cache-cleanup]
description = "Clean CI cache"
dependencies = ["cargo-prune", "delete-artifacts", "print-stats"]

[tasks.dotenv-linter-check]
command = "dotenv-linter"
args = ["--skip", "LowercaseKey"]

[tasks.dotenv-linter-compare]
command = "dotenv-linter"
args = ["compare", "config/.env.dist.drone", "config/.env.dist.local", "config/.env.dist.production", "config/.env.dist.qa", "config/.env.dist.staging"]

[tasks.dotenv-linter]
description = "dotenv-linter checks"
dependencies = ["dotenv-linter-check", "dotenv-linter-compare"]

[tasks.code-coverage]
script = "echo '\nCode coverage is not configured. Choose your preferred code coverage solution and update this Makefile task to use it.\n'"

# config/build

[tasks.release]
description = "Makes release."
run_task = { name = ["sweep-start", "build-release", "archive"]}

[tasks.sweep-start]
description = "Start cargo sweep"
command = "cargo"
args = ["sweep", "-s"]

[tasks.build-release]
description = "Runs cargo build --release."
command = "cargo"
args = [ "build", "--release", "--jobs=4"]

[tasks.archive]
description = "Creates archive with binaries."
script = [
    "cp -p target/release/test .",
    "cp -p target/release/migrate .",
    "tar cfz ${VERSION}-${ENV}.tar.gz config test migrate config/.env.dist.*",
    "rm test migrate"
]
